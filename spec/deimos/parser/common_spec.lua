local c = require "deimos.parser.common"

describe("common", function()
    describe("comma", function()
        it("should parse", function()
            assert.is.truthy(c.comma:match(","))
            assert.is.truthy(c.comma:match(", "))
        end)
    end)

    describe("dot", function()
        it("should parse", function()
            assert.is.truthy(c.dot:match("."))
            assert.is.truthy(c.dot:match(". "))
        end)
    end)

    describe("newline", function()
        it("should parse at least one", function()
            assert.is.falsy(c.newline:match(""))
            assert.is.truthy(c.newline:match("\r"))
            assert.is.truthy(c.newline:match("\n"))
            assert.is.truthy(c.newline:match("\r\n"))
            assert.is.truthy(c.newline:match("\n\r"))
            assert.is.truthy(c.newline:match("\r\n\r\n"))
            assert.is.truthy(c.newline:match("\n\n"))
        end)
    end)

    describe("number", function()
        it("should parse whole numbers", function()
            assert.equal(123, c.number:match("123"))
            assert.equal(123, c.number:match("123 "))
        end)
        it("should parse signed integers", function()
            assert.equal(123, c.number:match("+123"))
            assert.equal(123, c.number:match("+123 "))
            assert.equal(-123, c.number:match("-123"))
            assert.equal(-123, c.number:match("-123 "))
        end)
    end)

    describe("org", function()
        it("should parse org keyword", function()
            assert.is.truthy(c.org:match("ORG"))
            assert.is.truthy(c.org:match("ORG "))
            assert.is.truthy(c.org:match("org"))
            assert.is.truthy(c.org:match("org "))
        end)
    end)

    describe("whitespace", function()
        it("should parse arbitrary amounts", function()
            assert.is.truthy(c.whitespace:match(""))
            assert.is.truthy(c.whitespace:match("   "))
            assert.is.truthy(c.whitespace:match("\t\t\t"))
            assert.is.truthy(c.whitespace:match(" \t "))
        end)
    end)
end)
